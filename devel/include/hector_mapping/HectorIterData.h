// Generated by gencpp from file hector_mapping/HectorIterData.msg
// DO NOT EDIT!


#ifndef HECTOR_MAPPING_MESSAGE_HECTORITERDATA_H
#define HECTOR_MAPPING_MESSAGE_HECTORITERDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hector_mapping
{
template <class ContainerAllocator>
struct HectorIterData_
{
  typedef HectorIterData_<ContainerAllocator> Type;

  HectorIterData_()
    : hessian()
    , conditionNum(0.0)
    , determinant(0.0)
    , conditionNum2d(0.0)
    , determinant2d(0.0)  {
      hessian.assign(0.0);
  }
  HectorIterData_(const ContainerAllocator& _alloc)
    : hessian()
    , conditionNum(0.0)
    , determinant(0.0)
    , conditionNum2d(0.0)
    , determinant2d(0.0)  {
  (void)_alloc;
      hessian.assign(0.0);
  }



   typedef boost::array<double, 9>  _hessian_type;
  _hessian_type hessian;

   typedef double _conditionNum_type;
  _conditionNum_type conditionNum;

   typedef double _determinant_type;
  _determinant_type determinant;

   typedef double _conditionNum2d_type;
  _conditionNum2d_type conditionNum2d;

   typedef double _determinant2d_type;
  _determinant2d_type determinant2d;





  typedef boost::shared_ptr< ::hector_mapping::HectorIterData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_mapping::HectorIterData_<ContainerAllocator> const> ConstPtr;

}; // struct HectorIterData_

typedef ::hector_mapping::HectorIterData_<std::allocator<void> > HectorIterData;

typedef boost::shared_ptr< ::hector_mapping::HectorIterData > HectorIterDataPtr;
typedef boost::shared_ptr< ::hector_mapping::HectorIterData const> HectorIterDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_mapping::HectorIterData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_mapping::HectorIterData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hector_mapping

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'hector_mapping': ['/home/rodrigo/catkin_ws/src/hector_slam/hector_mapping/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hector_mapping::HectorIterData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_mapping::HectorIterData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_mapping::HectorIterData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_mapping::HectorIterData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_mapping::HectorIterData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_mapping::HectorIterData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_mapping::HectorIterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecedaa7e26b5fc817a1add44c17fec5f";
  }

  static const char* value(const ::hector_mapping::HectorIterData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecedaa7e26b5fc81ULL;
  static const uint64_t static_value2 = 0x7a1add44c17fec5fULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_mapping::HectorIterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_mapping/HectorIterData";
  }

  static const char* value(const ::hector_mapping::HectorIterData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_mapping::HectorIterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[9] hessian\n"
"float64 conditionNum\n"
"float64 determinant\n"
"float64 conditionNum2d\n"
"float64 determinant2d\n"
;
  }

  static const char* value(const ::hector_mapping::HectorIterData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_mapping::HectorIterData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hessian);
      stream.next(m.conditionNum);
      stream.next(m.determinant);
      stream.next(m.conditionNum2d);
      stream.next(m.determinant2d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HectorIterData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_mapping::HectorIterData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_mapping::HectorIterData_<ContainerAllocator>& v)
  {
    s << indent << "hessian[]" << std::endl;
    for (size_t i = 0; i < v.hessian.size(); ++i)
    {
      s << indent << "  hessian[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hessian[i]);
    }
    s << indent << "conditionNum: ";
    Printer<double>::stream(s, indent + "  ", v.conditionNum);
    s << indent << "determinant: ";
    Printer<double>::stream(s, indent + "  ", v.determinant);
    s << indent << "conditionNum2d: ";
    Printer<double>::stream(s, indent + "  ", v.conditionNum2d);
    s << indent << "determinant2d: ";
    Printer<double>::stream(s, indent + "  ", v.determinant2d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_MAPPING_MESSAGE_HECTORITERDATA_H
